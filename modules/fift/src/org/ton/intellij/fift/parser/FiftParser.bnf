{
    parserClass="org.ton.intellij.fift.parser.FiftParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Fift"
    psiImplClassSuffix="Impl"
    psiPackage="org.ton.intellij.fift.psi"
    psiImplPackage="org.ton.intellij.fift.psi.impl"

    elementTypeHolderClass="org.ton.intellij.fift.psi.FiftTypes"
    elementTypeClass="org.ton.intellij.fift.psi.FiftElementType"
    tokenTypeClass="org.ton.intellij.fift.psi.FiftTokenType"
    
    tokens = [
        CHAR='regexp:(char \S)'
        ABORT='regexp:(abort"([^"\r\n\\]|\\.)*")'
        PRINT='regexp:(\."([^"\r\n\\]|\\.)*")'
        WORD_DEF='regexp:(::_|::|:)\s(\S+)'
        STRING_CONCAT='regexp:(\+"([^"\r\n\\]|\\.)*")'
        STRING_LITERAL='regexp:("([^"\r\n\\]|\\.)*")'
        NUMBER_DIGIT_LITERAL='regexp:(-?[0-9]+(/-?[0-9]+)?)'
        NUMBER_HEX_LITERAL='regexp:(0[xX][0-9a-fA-F]+)'
        NUMBER_BINARY_LITERAL='regexp:(0[bB][01]+)'
        SLICE_BINARY_LITERAL='regexp:(b\{[01]+})'
        SLICE_HEX_LITERAL='regexp:(x\{[0-9a-fA-F_]+})'
        BYTE_HEX_LITERAL='regexp:(B\{[0-9a-fA-F_]+})'
        LBRACKET='['
        RBRACKET=']'
        LBRACE='{'
        RBRACE='}'
        LPAREN='('
        RPAREN=')'
        UNDERSCORE_LPAREN='_('
        DUP='dup'
        DROP='drop'
        SWAP='swap'
        ROT='rot'
        REV_ROT='-rot'
        OVER='over'
        TUCK='tuck'
        NIP='nip'
        DUP_DUP='2dup'
        DROP_DROP='2drop'
        SWAP_SWAP='2swap'
        PICK='pick'
        ROLL='roll'
        REV_ROLL='-roll'
        EXCH='exch'
        EXCH2='exch2'
        COND_DUP='?dup'
        IF='if'
        IFNOT='ifnot'
        COND='cond'
        UNTIL='until'
        WHILE='while'
        TIMES='times'
        INCLUDE='include'
        TRUE='true'
        FALSE='false'
        COLON=':'
        DOUBLE_COLON='::'
        DOUBLE_COLON_UNDERSCORE='::_'

        PROGRAM_START      = 'PROGRAM{'
        END_C              = '}END>c'
        DECLPROC           = 'DECLPROC'
        DECLMETHOD         = 'DECLMETHOD'
        DECLGLOBVAR        = 'DECLGLOBVAR'
        PROC_START         = 'PROC:<{'
        PROCINLINE_START   = 'PROCINLINE:<{'
        PROCREF_START      = 'PROCREF:<{'
        METHOD_START       = 'METHOD:<{'
        IF_START           = 'IF:<{'
        IFNOT_START        = 'IFNOT:<{'
        ELSE_START         = '}>ELSE<{'
        IFJMP_START        = 'IFJMP:<{'
        IFNOTJMP_START     = 'IFNOTJMP:<{'
        WHILE_START        = 'WHILE:<{'
        REPEAT_START       = 'REPEAT:<{'
        UNTIL_START        = 'UNTIL:<{'
        DO_SEP             = '}>DO<{'
        CONT_START         = 'CONT:<{'
        ANGLE_LBRACE       = '<{'
        ANGLE_RBRACE       = '}>'
        ANGLE_RBRACE_C     = '}>c'
        ANGLE_RBRACE_S     = '}>s'
        ANGLE_RBRACE_CONT  = '}>CONT'
        TO_BOC_FIFT        = 'B>boc'
    ]

    implements(".*") = "org.ton.intellij.fift.psi.FiftElement"
}

private root ::= statement*
private statement ::= (word_def_statement | block | session | list | literal | word | Assembly)
word ::= stack_word | loop_word | cond_word | INCLUDE | CHAR | ABORT | PRINT | STRING_CONCAT | ordinary_word
ordinary_word ::= IDENTIFIER {
    mixin = "org.ton.intellij.fift.psi.FiftOrdinaryWordMixin"
}
number_literal ::= NUMBER_DIGIT_LITERAL | NUMBER_HEX_LITERAL | NUMBER_BINARY_LITERAL
boolean_literal ::= TRUE | FALSE
block ::= '{' statement* '}'
session ::= '[' statement* ']'
list ::= ('(' | '_(') statement* ')'
literal ::= number_literal | boolean_literal | STRING_LITERAL | SLICE_BINARY_LITERAL | SLICE_HEX_LITERAL | BYTE_HEX_LITERAL
stack_word ::= DUP | DROP | SWAP | ROT | REV_ROT | OVER | TUCK | NIP | DUP_DUP | DROP_DROP | SWAP_SWAP | PICK | ROLL | REV_ROLL | EXCH | EXCH2 | COND_DUP
loop_word ::= UNTIL | WHILE | TIMES
cond_word ::= IF | IFNOT | COND
word_def_statement ::= ((block word*) | ordinary_word) WORD_DEF word_def_tail {
    implements = "org.ton.intellij.fift.psi.FiftNamedElement"
    mixin = "org.ton.intellij.fift.psi.FiftWordDefStatementMixin"
}

word_def_tail ::= WORD_DEF*

//noinspection BnfUnusedRule
private unused_in_bnf ::= LINE_COMMENT | BLOCK_COMMENT | LINE_DOCUMENTATION | BLOCK_DOCUMENTATION

// ────────────────────────────────────────────────────────────────────────────
//  Fift Asssembly
// ────────────────────────────────────────────────────────────────────────────

Assembly ::= 'PROGRAM{' AsmProgram '}END>c' { pin=1 }

AsmProgram ::= (Declaration | Definition)*

// declarations
Declaration ::= ProcDeclaration | MethodDeclaration | GlobalVar

ProcDeclaration   ::= 'DECLPROC' DefinitionName {pin=1}
MethodDeclaration ::= number_literal 'DECLMETHOD' DefinitionName {pin=2}
GlobalVar         ::= 'DECLGLOBVAR' DefinitionName {pin=1}

// definitions
Definition ::= ProcDefinition | ProcInlineDefinition | ProcRefDefinition | MethodDefinition

ProcDefinition       ::= DefinitionName 'PROC:<{'        Instruction* '}>' {pin=2}
ProcInlineDefinition ::= DefinitionName 'PROCINLINE:<{'  Instruction* '}>' {pin=2}
ProcRefDefinition    ::= DefinitionName 'PROCREF:<{'     Instruction* '}>' {pin=2}
MethodDefinition     ::= DefinitionName 'METHOD:<{'      Instruction* '}>' {pin=2}

DefinitionName ::= ordinary_word

// instructions
Instruction ::= IfStatement | IfjmpStatement | WhileStatement | RepeatStatement | UntilStatement | AsmExpression

AsmExpression ::= AsmArgumentList? TvmInstruction

AsmArgumentList ::= AsmPrimitive+ { pin=1 }

AsmPrimitive ::= InstructionBlock
               | STRING_LITERAL
               | SLICE_HEX_LITERAL
               | SLICE_BINARY_LITERAL
               | AsmBocHex
               | StackRegister
               | ControlRegister
               | number_literal
               | ARG_IDENTIFIER

InstructionBlock ::= ('<{' | 'CONT:<{') Instruction* ( '}>' | '}>c' | '}>s' | '}>CONT' )

IfStatement    ::= ('IF:<{' | 'IFNOT:<{') Instruction* ('}>ELSE<{' Instruction*)? '}>' ?
IfjmpStatement ::= ('IFJMP:<{' | 'IFNOTJMP:<{') Instruction* '}>'
WhileStatement ::= 'WHILE:<{' Instruction* '}>DO<{' Instruction* '}>'
RepeatStatement ::= 'REPEAT:<{' Instruction* '}>'
UntilStatement  ::= 'UNTIL:<{' Instruction* '}>'

// helpers
AsmBocHex      ::= BYTE_HEX_LITERAL 'B>boc'?

StackRegister  ::= 's0' | 's1' | 's2' | 's3' | 's4' | 's5' | 's6' | 's7'
                 | 's8' | 's9' | 's10' | 's11' | 's12' | 's13' | 's14' | 's15'
                 | 's()' | 's(-1)' | 's(-2)' | 's(-3)' | 's(-4)'

ControlRegister ::= 'c0' | 'c1' | 'c2' | 'c3' | 'c4' | 'c5' | 'c6' | 'c7'

TvmInstruction ::= '-'? IDENTIFIER {
    mixin = "org.ton.intellij.fift.psi.FiftAssemblyInstructionMixin"
}

{
    parserClass='org.ton.intellij.tolk.parser.TolkParser'
    parserUtilClass='org.ton.intellij.tolk.parser.TolkParserUtil'

    psiClassPrefix='Tolk'
    psiImplClassSuffix='Impl'
    psiPackage='org.ton.intellij.tolk.psi'
    psiImplPackage='org.ton.intellij.tolk.psi.impl'
    implements='org.ton.intellij.tolk.psi.TolkElement'

    elementTypeHolderClass="org.ton.intellij.tolk.psi.TolkElementTypes"
    tokenTypeClass="org.ton.intellij.tolk.psi.TolkTokenType"
    elementTypeClass="org.ton.intellij.tolk.psi.TolkElementType"

    extends(".+TypeExpression")=TypeExpression
    extends("^(?!Type).+Expression")=Expression
    extends(".*Statement")=Statement
    elementType(".+BinExpression")=BinExpression
    elementType(".+BinOp")=BinaryOp

    generateTokenAccessors=true

    tokens = [
            PLUS                = '+'
            MINUS               = '-'
            TIMES               = '*'
            DIV                 = '/'
            MOD                 = '%'
            QUEST               = '?'
            COLON               = ':'
            COMMA               = ','
            SEMICOLON           = ';'
            LBRACE              = '{'
            RBRACE              = '}'
            LBRACK              = '['
            RBRACK              = ']'
            LPAREN              = '('
            RPAREN              = ')'
            EQ                  = '='
            LT                  = '<'
            GT                  = '>'
            AND                 = '&'
            ANDAND              = '&&'
            OR                  = '|'
            OROR                = '||'
            XOR                 = '^'
            SHA                 = '#'
            EXCL                = '!'
            DOT                 = '.'
            AT                  = '@'

            EQEQ                = '=='
            NEQ                 = '!='
            LEQ                 = '<='
            GEQ                 = '>='
            SPACESHIP           = '<=>'
            LSHIFT              = '<<'
            RSHIFT              = '>>'
            RSHIFTR             = '~>>'
            RSHIFTC             = '^>>'
            DIVR                = '~/'
            DIVC                = '^/'
            MODR                = '~%'
            MODC                = '^%'
            DIVMOD              = '/%'
            PLUSLET             = '+='
            MINUSLET            = '-='
            TIMESLET            = '*='
            DIVLET              = '/='
            DIVRLET             = '~/='
            DIVCLET             = '^/='
            MODLET              = '%='
            MODRLET             = '~%='
            MODCLET             = '^%='
            LSHIFTLET           = '<<='
            RSHIFTLET           = '>>='
            RSHIFTRLET          = '~>>='
            RSHIFTCLET          = '^>>='
            ANDLET              = '&='
            ORLET               = '|='
            XORLET              = '^='
            MAPSTO              = '->'
            TILDE               = '~'
            ARROW               = '=>'

            RETURN_KEYWORD              = 'return'
            VAR_KEYWORD                 = 'var'
            REPEAT_KEYWORD              = 'repeat'
            DO_KEYWORD                  = 'do'
            WHILE_KEYWORD               = 'while'
            TRY_KEYWORD                 = 'try'
            CATCH_KEYWORD               = 'catch'
            IF_KEYWORD                  = 'if'
            ELSE_KEYWORD                = 'else'
            AS_KEYWORD                  = 'as'
            IS_KEYWORD                  = 'is'
            NOT_IS_KEYWORD              = '!is'

            TYPE_KEYWORD                = 'type'
            TRUE_KEYWORD                = 'true'
            FALSE_KEYWORD               = 'false'
            NULL_KEYWORD                = 'null'
            REDEF_KEYWORD               = 'redef'
            FUN_KEYWORD                 = 'fun'
            AUTO_KEYWORD                = 'auto'
            VOID_KEYWORD                = 'void'
            VAL_KEYWORD                 = 'val'
            ENUM_KEYWORD                = 'enum'
            STRUCT_KEYWORD              = 'struct'
            EXPORT_KEYWORD              = 'export'
            BREAK_KEYWORD               = 'break'
            CONTINUE_KEYWORD            = 'continue'
            THROW_KEYWORD               = 'throw'
            ASSERT_KEYWORD              = 'assert'
            MUTATE_KEYWORD              = 'mutate'
            MATCH_KEYWORD               = 'match'
            SELF_KEYWORD                = 'self'

            EXPORT_KEYWORD              = 'export'
            GLOBAL_KEYWORD              = 'global'
            ASM_KEYWORD                 = 'asm'
            OPERATOR_KEYWORD            = 'operator'
            INFIX_KEYWORD               = 'infix'
            CONST_KEYWORD               = 'const'
            BUILTIN_KEYWORD             = 'builtin'
            GET_KEYWORD                 = 'GET_KEYWORD'
            IMPORT_KEYWORD              = 'import'
            TOLK_KEYWORD                = 'tolk'

            ESCAPE_SEQUENCE = "ESCAPE_SEQUENCE"
            DANGLING_NEWLINE = "DANGLING_NEWLINE"
//            VERSION_VALUE = "regexp:((=|>|>=|<|<=|\^)?\d+(\.\d+)?(\.\d+)?)"
            IDENTIFIER = "regexp:[a-zA-Z_$?:][0-9a-zA-Z_$?:]*"
//            WHITESPACE = 'regexp:[\ \n\t\f]'
            INTEGER_LITERAL = 'regexp:(0|([1-9]([_0-9])*))'
    ]
}

private root ::= TopLevelDefinition_with_recover*

private TopLevelDefinition ::= (IncludeDefinition | VersionDefinition | GlobalVar | ConstVar | TypeDef | Struct | Function | EmptyStatement)
private TopLevelDefinition_with_recover ::= !(<<eof>>) (TopLevelDefinition) {
    pin = 1
    recoverWhile = TopLevelDefinition_recover
}
private TopLevelDefinition_recover ::= !(TopLevelDefinition_first)
private TopLevelDefinition_first ::= 'tolk' | 'fun' | 'import' | 'global' | 'const' | ';' | '@' | 'enum' | 'struct' | 'type' | "get"

RawString ::= RAW_STRING_ELEMENT*
StringLiteral ::= OPEN_QUOTE RawString CLOSING_QUOTE {
    pin=1
    implements=["com.intellij.psi.PsiLanguageInjectionHost"]
    mixin="org.ton.intellij.tolk.psi.impl.TolkStringLiteralMixin"
}

GlobalVar ::= 'global' IDENTIFIER GlobalVarType ';'  {
    pin = 1
    mixin = "org.ton.intellij.tolk.psi.impl.TolkGlobalVarMixin"
    implements=[
        "org.ton.intellij.tolk.psi.TolkSymbolElement"
    ]
    stubClass="org.ton.intellij.tolk.stub.TolkGlobalVarStub"
    elementTypeFactory="org.ton.intellij.tolk.psi.TolkElementTypeFactory.stubFactory"
}
private GlobalVarType ::= ':' TypeExpression {
    pin = 1
}

ConstVar ::= 'const' IDENTIFIER ConstVarType? '=' Expression ';' {
    pin = 1
    mixin = "org.ton.intellij.tolk.psi.impl.TolkConstVarMixin"
    implements=[
        "org.ton.intellij.tolk.psi.TolkSymbolElement"
    ]
    stubClass="org.ton.intellij.tolk.stub.TolkConstVarStub"
    elementTypeFactory="org.ton.intellij.tolk.psi.TolkElementTypeFactory.stubFactory"
}
private ConstVarType ::= ':' TypeExpression {
    pin = 1
}

IncludeDefinition ::= 'import' StringLiteral {
    pin=1
    mixin="org.ton.intellij.tolk.psi.impl.TolkIncludeDefinitionMixin"
    stubClass="org.ton.intellij.tolk.stub.TolkIncludeDefinitionStub"
    elementTypeFactory="org.ton.intellij.tolk.psi.TolkElementTypeFactory.stubFactory"
}

VersionDefinition ::= 'tolk' VersionValue {
    pin=1
}
VersionValue ::= ('='|'>'|'>='|'<'|'<='|'^')? INTEGER_LITERAL ('.' INTEGER_LITERAL)*

TypeDef ::= 'type' IDENTIFIER TypeParameterList? '=' !'auto' TypeExpression {
    pin = 1
    mixin = "org.ton.intellij.tolk.psi.impl.TolkTypeMixin"
    implements = [
        "org.ton.intellij.tolk.psi.TolkTypeParameterListOwner"
        "org.ton.intellij.tolk.psi.TolkTypeSymbolElement"
    ]
    stubClass="org.ton.intellij.tolk.stub.TolkTypeDefStub"
    elementTypeFactory="org.ton.intellij.tolk.psi.TolkElementTypeFactory.stubFactory"
}

Struct ::= 'struct' StructConstructorTag? IDENTIFIER TypeParameterList? (StructBody | ';') {
    pin = 1
    mixin = "org.ton.intellij.tolk.psi.impl.TolkStructMixin"
    implements = [
        "org.ton.intellij.tolk.psi.TolkTypeParameterListOwner"
        "org.ton.intellij.tolk.psi.TolkTypeSymbolElement"
    ]
    stubClass="org.ton.intellij.tolk.stub.TolkStructStub"
    elementTypeFactory="org.ton.intellij.tolk.psi.TolkElementTypeFactory.stubFactory"
}

StructConstructorTag ::= '(' INTEGER_LITERAL ')'

StructBody ::= '{' StructBodyElements? '}' {
    pin = 1
}

private StructBodyElements ::= (StructBody_MultipleElement | StructBody_SingleElement) (','|';')?

private StructBody_SingleElement ::= StructField
private StructBody_MultipleElement ::= StructField ((','|';') StructField)+

StructField ::= IDENTIFIER ':' TypeExpression ['=' Expression] {
    pin = 1
    recoverWhile = StructField_recover
    mixin="org.ton.intellij.tolk.psi.impl.TolkStructFieldMixin"
    implements=[
        "org.ton.intellij.tolk.psi.TolkSymbolElement"
    ]
    stubClass="org.ton.intellij.tolk.stub.TolkStructFieldStub"
    elementTypeFactory="org.ton.intellij.tolk.psi.TolkElementTypeFactory.stubFactory"
}
private StructField_recover ::= !(';'|','|'}')
//PragmaDefinition ::= PragmaDefinitionPart
//PragmaKey ::= IDENTIFIER
//PragmaValue ::= StringLiteral | IntegerExpression
//private PragmaDefinitionPart ::= "pragma" (PragmaVersion | PragmaKeyValue)  {
//    pin = 1
//}
//PragmaKeyValue ::= PragmaKey PragmaValue? {
//    pin=1
//}
//PragmaVersion ::= ("version" | "not-version") ('='|'>'|'>='|'<'|'<='|'^')? INTEGER_LITERAL ('.' INTEGER_LITERAL)* {
//    pin=1
//}
//PragmaSemiVersion ::= INTEGER_LITERAL ('.' INTEGER_LITERAL ('.' INTEGER_LITERAL)?)?

//Function ::= (TypeParameterList|'get')? TypeReference FunctionIdentifier FunctionParameterList FunctionAttributes FunctionBody {
Function ::= Annotation* ((get 'fun'?) | ('fun')) FunctionReceiver? IDENTIFIER TypeParameterList? ParameterList ReturnType? FunctionBody {
    pin = 2
    implements = [
        "org.ton.intellij.tolk.psi.TolkInferenceContextOwner"
        "org.ton.intellij.tolk.psi.TolkTypeParameterListOwner"
        "org.ton.intellij.tolk.psi.TolkSymbolElement"
    ]
    mixin = "org.ton.intellij.tolk.psi.impl.TolkFunctionMixin"
    stubClass = "org.ton.intellij.tolk.stub.TolkFunctionStub"
    elementTypeFactory = "org.ton.intellij.tolk.psi.TolkElementTypeFactory.stubFactory"
//    hooks = [
//        leftBinder = "ADJACENT_LINE_COMMENTS"
//    ]
}

FunctionReceiver ::= TypeExpression '.'

private get ::= <<getKeyword>>

ReturnType ::= ':' (TypeExpression | 'self') {
    pin = 1
}

Annotation ::= '@' IDENTIFIER AnnotationParamList? {
    pin = 1
}
AnnotationParamList ::= '(' << comma_separated_list AnnotationParam >> ')' {
    pin = 1
}
AnnotationParam ::= INTEGER_LITERAL | StringLiteral

FunctionBody ::= ';' | AsmDefinition | BlockStatement | ('builtin' ';')

TypeParameterList ::= '<' << comma_separated_list TypeParameter >> '>' {
    pin=1
}
TypeParameter ::= IDENTIFIER {
    mixin = "org.ton.intellij.tolk.psi.impl.TolkTypeParameterMixin"
    implements=[
        "org.ton.intellij.tolk.psi.TolkSymbolElement"
    ]
    stubClass="org.ton.intellij.tolk.stub.TolkTypeParameterStub"
    elementTypeFactory="org.ton.intellij.tolk.psi.TolkElementTypeFactory.stubFactory"
}

AsmDefinition ::= 'asm' AsmParameters? AsmBody ';' {pin=1}
AsmParameters ::= '(' AsmArgumentList? AsmIndexList? ')' {pin=1}
private AsmArgumentList ::= AsmArgument+
AsmArgument ::= 'self'|IDENTIFIER {
    mixin = "org.ton.intellij.tolk.psi.impl.TolkAsmArgumentMixin"
}
private AsmIndexList ::= '->' AsmIndex+ {
    pin=1
}
AsmIndex ::= IntegerExpression
AsmBody ::= StringLiteral+

Statement ::= ReturnStatement
            | BlockStatement
            | RepeatStatement
            | IfStatement
            | DoStatement
            | WhileStatement
            | AssertStatement
            | ThrowStatement
            | TryStatement
            | MatchStatement
            | ExpressionStatement
            | EmptyStatement

MatchStatement ::= MatchExpression ';'? {
    pin=1
}

ExpressionStatement ::= Expression (';' !'}')? {
    pin=1
}

EmptyStatement ::= ';'

ReturnStatement ::= 'return' Expression? {pin=1}

BlockStatement ::= '{' BlockElement_with_recovery* '}' {
    pin=1
}
private BlockElement_with_recovery ::= Statement {
    recoverWhile=BlockElement_recovery
}
private BlockElement_recovery ::= !(StatementFirst | ExpressionFirst | '}')
private StatementFirst ::= 'return'|'{'|'repeat'|'if'|'do'|'while'|'assert'|'throw'|'try'|'var'|'val'|'match'|';'
private ExpressionFirst ::= IDENTIFIER | INTEGER_LITERAL | '-' | '+' | '!' | '(' | '[' | 'match'

RepeatStatement ::= 'repeat' Expression BlockStatement {pin=1}

IfStatement ::= 'if' Condition BlockStatement ElseBranch? {
    pin=1
    methods=[
        condition="/Expression"
    ]
}

private Condition ::= '(' Expression ')' {
    pin = 1
}

ElseBranch ::= 'else' (BlockStatement | IfStatement) {
    pin = 1
}

DoStatement ::= 'do' BlockStatement 'while' Condition ';' {
    pin = 1
    methods = [
        condition="/Expression"
    ]
}
WhileStatement ::= 'while' Condition BlockStatement {
    pin = 1
    methods = [
        condition="/Expression"
    ]
}

ThrowStatement ::= 'throw' (ThrowArg | ThrowExcNo) {
    pin = 1
}
private ThrowExcNo ::= (!'(') Expression {
    pin = 1
//    recoverWhile=ThrowExcNo_recover
}

//private ThrowExcNo_recover ::= !(';')

private ThrowArg ::= '(' Expression (',' ThrowArg_element)? ')' {
    pin=1
//    recoverWhile=ThrowExcNo_recover
}
private ThrowArg_element ::= Expression {
//    recoverWhile=ThrowArg_element_recover
}
//private ThrowArg_element_recover ::= !(')'|';')

AssertStatement ::= 'assert' AssertBody {
    pin = 1
}
private AssertBody ::= '(' AssertCondition (AssertWithThrow | AssertWithoutThrow) {
    pin = 1
}
private AssertWithThrow ::= ')' ThrowStatement {
    pin = 1
}
private AssertWithoutThrow ::= ',' AssertExcNo ')' ';' {
    pin = 1
}

private AssertCondition ::= Expression
private AssertExcNo ::= Expression

TryStatement ::= 'try' BlockStatement Catch {pin=1}
Catch ::= 'catch' CatchParameterList? BlockStatement {
    pin = 1
}
private CatchParameterList ::= '(' CatchParameter (',' CatchParameter)? ')' {
    pin = 1
}
CatchParameter ::= IDENTIFIER {
    mixin="org.ton.intellij.tolk.psi.impl.TolkCatchParameterMixin"
    implements = [
        "org.ton.intellij.tolk.psi.TolkSymbolElement"
    ]
}

Expression ::=
    VarExpression
    | AssignBinExpression // expr10
    | TernaryExpression // expr10
    | LogicalBinExpression //expr13
    | BitwiseBinExpression // expr14
    | ShiftBinExpression // expr17
    | CompBinExpression // expr15
    | AddBinExpression // expr20
    | MulBinExpression // expr30
    | AsExpression // expr40
    | IsExpression // expr40
    | PrefixExpression // expr75
    | CallExpression
    | NotNullExpression
    | DotExpression // expr80
    | StructExpression
    | AtomicExpression
    | MatchExpression
{
    implements=[
        "org.ton.intellij.tolk.psi.TolkTypedElement"
    ]
    recoverWhile=Expression_recover
}
private Expression_recover ::= !(';'|'}'|',')

fake BinExpression ::= Expression BinaryOp Expression {
    mixin="org.ton.intellij.tolk.psi.impl.TolkBinExpressionMixin"
    methods=[
        left="/Expression[0]"
        right="/Expression[1]"
    ]
}

//noinspection BnfUnusedRule
fake BinaryOp ::= '=' | '+=' | '-=' | '*=' | '/=' | '~/=' | '^/=' | '%=' | '~%=' | '^%='
| '<<=' | '>>=' | '^>>=' | '~>>='
| '&=' | '|=' | '^='
| '==' | '!='
| '<' | '>' | '<=' | '>=' | '<=>'
| '<<' | '>>' | '~>>' | '^>>'
| '-' | '+'
| '|'
| '^'
| '*' | '/' | '%' | '/%' | '^/' | '~/' | '^%' | '~%'
| '&'
| '||'
| '&&'

VarExpression ::= ('var'|'val') VarDefinition '=' Expression {
    pin = 1
}
AssignBinExpression ::= Expression AssignBinOp Expression {
    rightAssociative=true
    pin=2
}
TernaryExpression ::= Expression '?' Expression ':' Expression {
    methods=[
        condition="/Expression[0]"
        thenBranch="/Expression[1]"
        elseBranch="/Expression[2]"
    ]
    rightAssociative=true
}
LogicalBinExpression ::= Expression LogicalBinOp Expression
BitwiseBinExpression ::= Expression BitwiseBinOp Expression
ShiftBinExpression ::= Expression ShiftBinOp Expression
CompBinExpression ::= Expression CompBinOp Expression
AddBinExpression ::= Expression AddBinOp Expression
MulBinExpression ::= Expression MulBinOp Expression
PrefixExpression ::= ('!'|'~'|'-'|'+') Expression {
    mixin="org.ton.intellij.tolk.psi.impl.TolkPrefixExpressionMixin"
}
NotNullExpression ::= Expression '!' {
//    mixin="org.ton.intellij.tolk.psi.impl.TolkNullableTypeExpressionMixin"
}

StructExpression ::= ReferenceTypeExpression? StructExpressionBody
StructExpressionBody ::= '{' StructExpressionFields? '}' {
    pin = 1
}

private StructExpressionFields ::= StructExpressionField (',' StructExpressionField)* ','? {
    pin = 1
}

StructExpressionField ::= IDENTIFIER (':' Expression)? {
    pin = 1
    mixin="org.ton.intellij.tolk.psi.impl.TolkStructExpressionFieldMixin"
}

//private StructExpressionField_recover ::= !(','|'}'|';'|')'|']')

AssignBinOp ::= '+=' | '-=' | '*=' | '/=' | '~/=' | '^/=' | '%=' | '~%=' | '^%=' | '<<=' | '>>=' | '^>>=' | '~>>=' | '&=' | '|=' | '^=' | '=' {
    name = "operator"
}
LogicalBinOp ::= '&&' | '||' { name = "operator" }
BitwiseBinOp ::= '&' | '|' | '^' { name = "operator" }

CompBinOp ::= '==' | '!=' | '<' | '>' | '<=' | '>=' | '<=>' { name = "operator" }
ShiftBinOp ::= '<<' | <<parseGtGt>> | '~>>' | '^>>' { name = "operator" }
AddBinOp ::= '-' | '+' { name = "operator" }
MulBinOp  ::= '*' | '/' | '%' | '/%' | '^/' | '~/' | '^%' | '~%' { name = "operator" }

// vat_declaration_lhs
VarDefinition ::= VarTensor | VarTuple | VarRedef | Var {
    implements=[
        "org.ton.intellij.tolk.psi.TolkTypedElement"
    ]
}

VarTensor ::= '(' <<list_with_recover VarDefinition>> ')' {
    pin = 1
    extends = VarDefinition
}

VarTuple ::= '[' <<list_with_recover VarDefinition>> ']' {
    pin = 1
    extends = VarDefinition
}

VarRedef ::= ReferenceExpression 'redef' {
    pin = 2
    extends = VarDefinition
    mixin = "org.ton.intellij.tolk.psi.impl.TolkVarRedefMixin"
    implements = [
        "org.ton.intellij.tolk.psi.TolkTypedElement"
    ]
}

Var ::= IDENTIFIER (':' TypeExpression)? {
    mixin = "org.ton.intellij.tolk.psi.impl.TolkVarMixin"
    implements = [
        "org.ton.intellij.tolk.psi.TolkSymbolElement"
    ]
    extends = VarDefinition
}

CallExpression ::= Expression ArgumentList {
    rightAssociative = true
    mixin = "org.ton.intellij.tolk.psi.impl.TolkCallExpressionMixin"
}

DotExpression ::= Expression '.' Expression {
    pin=2
    methods=[
        left="/Expression[0]"
        right="/Expression[1]"
    ]
    mixin = "org.ton.intellij.tolk.psi.impl.TolkDotExpressionMixin"
}

AsExpression ::= Expression 'as' TypeExpression {
    pin = 2
    mixin = "org.ton.intellij.tolk.psi.impl.TolkAsExpressionMixin"
}
IsExpression ::= Expression ('is'|'!is') TypeExpression {
    pin = 2
    mixin = "org.ton.intellij.tolk.psi.impl.TolkIsExpressionMixin"
}

MatchExpression ::= 'match' '(' Expression ')' '{' MatchArm* '}' {
    pin = 1
}
MatchArm ::= MatchPattern '=>' (MatchThrowArm | MatchReturnArm | MatchBlockArm | MatchExpressionArm) {
    pin = 1
}

private MatchThrowArm ::= ThrowStatement (&'}' | ',') {
    pin = 1
}
private MatchReturnArm ::= ReturnStatement (&'}' | ',') {
    pin = 1
}
private MatchBlockArm ::= BlockStatement ','? {
    pin = 1
}
private MatchExpressionArm ::= Expression (&'}' | ',') {
    pin = 1
}

MatchPattern ::= MatchPatternReference | TypeExpression | Expression | 'else'

MatchPatternReference ::= IDENTIFIER {
    mixin = "org.ton.intellij.tolk.psi.impl.TolkMatchPatternReferenceMixin"
    implements = [
        "org.ton.intellij.tolk.psi.TolkTypedElement"
    ]
}

ArgumentList ::= '(' [<<list_with_recover Argument>>] ')' {
    pin = 1
}
//private args ::= <<comma_separated_list Argument>> {
//    recoverWhile = recoverArgs
//}
//private recoverArgs ::= !(')'|';')


Argument ::= 'mutate'? Expression

private AtomicExpression ::= UnitExpression
                        | TensorOrParenExpression
                        | TupleExpression
                        | LiteralExpression
                        | SelfExpression
                        | ReferenceExpression

UnitExpression ::= '(' ')'

fake TensorExpression ::= '(' <<comma_separated_list Expression>> ')' {
    pin = 2
}
fake ParenExpression ::= '(' Expression ')' {
    pin = 1
}

TensorOrParenExpression ::= '(' TensorOrParenElement (TensorExpression_upper|',')? ')' {
    pin = 1
    elementType = ParenExpression
}
upper TensorExpression_upper ::= ',' TensorOrParenElement TensorExpressionElements* {
    elementType = TensorExpression
    pin=2
}
private TensorExpressionElements ::= ',' (TensorOrParenElement | &')') {
    pin=1
}
private TensorOrParenElement ::= Expression {
    recoverWhile=TensorExpressionValue_recovery
}

private TensorExpressionValue_recovery ::= !(','|')'|';')

TupleExpression ::= '[' [ <<comma_separated_list TupleElement>> ] ']' {
    pin=1
    extends=Expression
}
private TupleElement ::= Expression {
    recoverWhile=TupleElement_recovery
}
private TupleElement_recovery ::= !(','|']'|';')

private IntegerExpression ::= INTEGER_LITERAL
private BoolExpression ::= 'true' | 'false'
private NullExpression ::= 'null' !'('

LiteralExpression ::= INTEGER_LITERAL | BoolExpression | NullExpression | StringLiteral {
    mixin="org.ton.intellij.tolk.psi.impl.TolkLiteralExpressionMixin"
}

SelfExpression ::= 'self' {
    mixin="org.ton.intellij.tolk.psi.impl.TolkSelfExpressionMixin"
}

ReferenceExpression ::= IDENTIFIER TypeArgumentList? {
    mixin="org.ton.intellij.tolk.psi.impl.TolkReferenceExpressionMixin"
    implements= [
        "org.ton.intellij.tolk.psi.TolkNamedElement"
        "org.ton.intellij.tolk.psi.TolkTypedElement"
    ]
}

TypeArgumentList ::= '<' <<comma_separated_list TypeArgument>> '>'
private TypeArgument ::= TypeExpression

//private TypeArgumentElements ::= <<comma_separated_list TypeArgument>> {
////    recoverWhile=TypeArgumentList_recovery
//}
////private TypeArgumentList_recovery ::= !('>'|'('|')'|';')
//private TypeArgument ::= TypeExpression {
////    recoverWhile=TypeArgument_recovery
//}
//private TypeArgument_recovery ::= !(','|'>'|'('|';'|StatementFirst)

ParameterList ::= '(' !',' SelfParameter_with_comma? Parameter_with_recover* ')' {
    pin = 1
}

Parameter ::= 'mutate'? IDENTIFIER ':' TypeExpression {
    mixin="org.ton.intellij.tolk.psi.impl.TolkParameterMixin"
    implements=[
        "org.ton.intellij.tolk.psi.TolkSymbolElement"
    ]
    stubClass="org.ton.intellij.tolk.stub.TolkParameterStub"
    elementTypeFactory="org.ton.intellij.tolk.psi.TolkElementTypeFactory.stubFactory"
}
private Parameter_with_recover ::= !(')'|'{'|';') Parameter (','|&')') {
    pin = 1
    recoverWhile = Parameter_recover
}
private Parameter_recover ::= !('('|'['|'mutate'|IDENTIFIER|'self'|')'|'{'|';')

SelfParameter ::= 'mutate'? 'self' {
    stubClass="org.ton.intellij.tolk.stub.TolkSelfParameterStub"
    elementTypeFactory="org.ton.intellij.tolk.psi.TolkElementTypeFactory.stubFactory"
}
private SelfParameter_with_comma ::= SelfParameter (','|&')') {
    pin = 1
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Types
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TypeExpression ::=
    FunTypeExpression
    | UnionTypeExpression
    | NullableTypeExpression
    | GenericTypeExpression
    | SimpleTypeExpression
{
    implements=[
        "org.ton.intellij.tolk.psi.TolkTypedElement"
    ]
}

GenericTypeExpression ::= SimpleTypeExpression TypeArgumentList {
   extends=TypeExpression
   mixin="org.ton.intellij.tolk.psi.impl.TolkGenericTypeExpressionMixin"
}

NullableTypeExpression ::= SimpleTypeExpression '?' {
    mixin="org.ton.intellij.tolk.psi.impl.TolkNullableTypeExpressionMixin"
}

private SimpleTypeExpression ::=
    NullTypeExpression
    | SelfTypeExpression
    | AutoTypeExpression
    | VoidTypeExpression
    | TensorOrParenTypeExpression
    | TupleTypeExpression
    | ReferenceTypeExpression

SelfTypeExpression ::= 'self' {
    extends=TypeExpression
}

UnionTypeExpression ::= unionType1 | unionType2 {
    mixin="org.ton.intellij.tolk.psi.impl.TolkUnionTypeExpressionMixin"
}

private unionType1 ::= '|' UnionTypeElement [('|' UnionTypeElement )+ '|'?] {
    pin = 1
}
private unionType2 ::= UnionTypeElement &'|' [('|' UnionTypeElement )+ '|'?] {
    pin = 2
}

NullTypeExpression ::= 'null' {
    mixin="org.ton.intellij.tolk.psi.impl.TolkNullTypeMixin"
}

private UnionTypeElement ::= FunTypeExpression | NullableTypeExpression | SimpleTypeExpression
//UnionType ::= headingUnionType | regularUnionType
//private regularUnionType ::= !'auto' TypeReference &'|' [(UnionTypeElement)+ '|'?] {
//    pin = 3
//}
//private headingUnionType ::= '|' !'auto' TypeReference [(UnionTypeElement)+ '|'?] {
//    pin = 1
//}
//private UnionTypeElement ::= '|' !'auto' TypeReference {
//    pin = 1
//}

//private TypeReference_first ::= '[' | '(' | 'var' | 'int' | 'cell' | 'slice' | 'builder' | 'cont' | 'tuple' | 'type' | IDENTIFIER

TupleTypeExpression ::= '[' TypeExpression TupleTypeExpressionValue* ']' {
    pin = 1
    mixin="org.ton.intellij.tolk.psi.impl.TolkTupleTypeMixin"
}
private TupleTypeExpressionValue ::= ',' TypeExpression {
    recoverWhile=TupleTypeValueRecovery
}
private TupleTypeValueRecovery ::= !(']'|IDENTIFIER|',')

FunTypeExpression ::= (FunTypeKw|MapTypeArrow) TypeExpression {
    pin = 1
    mixin="org.ton.intellij.tolk.psi.impl.TolkFunTypeExpressionMixin"
}
private FunTypeKw ::= 'fun' SimpleTypeExpression '->' {
    pin = 1
}
private MapTypeArrow ::= (NullableTypeExpression|SimpleTypeExpression) '->' {
    pin = 2
}

AutoTypeExpression ::= 'auto'
VoidTypeExpression ::= 'void' | ('(' ')') {
    mixin="org.ton.intellij.tolk.psi.impl.TolkVoidTypeExpressionMixin"
}

ReferenceTypeExpression ::= IDENTIFIER {
    mixin="org.ton.intellij.tolk.psi.impl.TolkReferenceTypeExpressionMixin"
    extends=TypeExpression
}

fake TensorTypeExpression ::= '(' [ <<comma_separated_list TypeExpression>> ] ')' {
    pin = 1
    mixin="org.ton.intellij.tolk.psi.impl.TolkTensorTypeExpressionMixin"
}
fake ParenTypeExpression ::= '(' TypeExpression ')' {
    pin = 1
    mixin="org.ton.intellij.tolk.psi.impl.TolkParenTypeExpressionMixin"
}

TensorOrParenTypeExpression ::= '(' !')' TypeExpression (TensorType_upper | ')') {
    pin = 2
    elementType = ParenTypeExpression
}
upper TensorType_upper ::= ',' [ TypeExpression (',' TypeExpression)* ] ')' {
    pin = 1
    elementType = TensorTypeExpression
}

private meta comma_separated_list ::= <<param>> (',' <<param>>)* ','?
private meta list_with_recover ::= <<comma_separated_list <<param>>>> {
    recoverWhile=paren_list_element_recover
}
private paren_list_element_recover ::= !(')'|']'|';')

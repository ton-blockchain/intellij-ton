constant.expression.fix.family.name=Compute constant value
func.name=FunC
inspection.divide.by.zero.description=Division by zero #loc
inspection.divide.by.zero.name=Division by zero
inspection.group.numeric.name=Numeric issues
inspection.int_literal_out_of_range=Value out of range

codeInsight.hint.value.numeric.constant.values=Numeric Constant Values
codeInsight.hint.other.method.id=Get Method ID
codeInsight.hint.description.values.method.id=Show inlay hints with method id.

group.general.name=General
group.style.name=Code style issues

inspection.if.throw.name=Convert 'if' with 'throw' to 'throw_if'
inspection.if.throw.description=Convert 'if' with 'throw' to 'throw_if'
inspection.ifnot.throw.description=Convert 'ifnot' with 'throw' to 'throw_unless'
inspection.if.throw.fix.family.name=Convert to throw_if/throw_unless
inspection.if.throw.fix.text=Convert to throw_if
inspection.ifnot.throw.fix.text=Convert to throw_unless
inspection.func.if.throw.display.name=Convert 'if' with 'throw' to 'throw_if'

inspection.func.style.constant.name=Convert a function returning constant integer to const
inspection.func.style.constant.description=Convert a function returning constant integer to const
inspection.func.style.constant.message=Function can be converted to constant for better readability
inspection.func.style.constant.fix.family.name=Convert to constant
inspection.func.style.constant.fix.text=Convert function to const with {0} value
inspection.func.style.constant.fix.all.family.name=Convert all to constants
inspection.func.style.constant.fix.all.text=Convert all such functions in this file to constants

inspection.func.operator.precedence.name=Suspicious operator precedence
inspection.func.operator.precedence.message=Suspicious operator precedence, consider adding parentheses for clarity
inspection.func.operator.precedence.fix.family.name=Add parentheses for clarity
inspection.func.operator.precedence.fix.text=Add parentheses to clarify precedence

<idea-plugin package="org.ton.intellij.func">
    <resource-bundle>messages.FuncBundle</resource-bundle>

    <extensions defaultExtensionNs="com.intellij">
        <fileType name="FunC"
                  implementationClass="org.ton.intellij.func.FuncFileType"
                  fieldName="INSTANCE"
                  language="FunC"
                  extensions="fc;func"
        />

        <lang.parserDefinition language="FunC"
                               implementationClass="org.ton.intellij.func.parser.FuncParserDefinition"/>
        <lang.syntaxHighlighterFactory language="FunC"
                                       implementationClass="org.ton.intellij.func.highlighting.FuncSyntaxHighlighterFactory"/>
        <lang.commenter language="FunC" implementationClass="org.ton.intellij.func.ide.FuncCommenter"/>

        <lang.braceMatcher language="FunC" implementationClass="org.ton.intellij.func.ide.FuncBraceMatcher"/>
        <lang.quoteHandler language="FunC" implementationClass="org.ton.intellij.func.ide.FuncQuoteHandler"/>
        <lang.foldingBuilder language="FunC" implementationClass="org.ton.intellij.func.ide.FuncFoldingBuilder"/>
        <lang.findUsagesProvider language="FunC"
                                 implementationClass="org.ton.intellij.func.ide.FuncFindUsagesProvider"/>
        <lang.implementationTextSelectioner language="FunC"
                                            implementationClass="org.ton.intellij.func.ide.FuncImplementationTextSelectioner"/>
        <lang.documentationProvider language="FunC"
                                    implementationClass="org.ton.intellij.func.doc.FuncDocumentationProvider"/>
        <lang.formatter language="FunC" implementationClass="org.ton.intellij.func.ide.formatter.FuncFormatter"/>
        <lang.refactoringSupport language="FunC"
                                 implementationClass="org.ton.intellij.func.refactor.FuncRefactoringSupportProvider"/>
        <lang.namesValidator language="FunC"
                             implementationClass="org.ton.intellij.func.refactor.FuncNamesValidator"/>
        <completion.contributor language="FunC"
                                implementationClass="org.ton.intellij.func.ide.completion.FuncCompletionContributor"/>
        <completion.confidence language="FunC" order="last"
                               implementationClass="org.ton.intellij.func.ide.completion.FuncCompletionConfidence"/>
        <lookup.charFilter implementation="org.ton.intellij.func.ide.completion.FuncCharFilter"/>

        <stubIndex implementation="org.ton.intellij.func.stub.index.FuncNamedElementIndex"/>
        <stubElementTypeHolder class="org.ton.intellij.func.psi.FuncElementTypes" externalIdPrefix="func."/>
        <lang.elementManipulator forClass="org.ton.intellij.func.psi.FuncIncludeDefinition"
                                 implementationClass="org.ton.intellij.func.psi.impl.FuncIncludePathElementManipulator"/>

        <lang.psiStructureViewFactory language="FunC"
                                      implementationClass="org.ton.intellij.func.structure.FuncStructureViewFactory"/>
        <breadcrumbsInfoProvider implementation="org.ton.intellij.func.structure.FuncBreadcrumbsInfoProvider"/>

        <colorSettingsPage implementation="org.ton.intellij.func.ide.colors.FuncColorSettingsPage"/>
        <additionalTextAttributes scheme="Default" file="colorSchemes/FuncDefault.xml"/>
        <additionalTextAttributes scheme="Dark" file="colorSchemes/FuncDark.xml"/>

        <typedHandler implementation="org.ton.intellij.func.editor.FuncTypedHandler" id="FuncTypedHandler"/>

        <liveTemplateContext
                contextId="func"
                implementation="org.ton.intellij.func.template.FuncEverywhereContextType"/>
        <liveTemplateContext
                contextId="funcTopLevel"
                implementation="org.ton.intellij.func.template.FuncTopLevelContextType"/>
        <liveTemplateContext
                contextId="funcStatement"
                implementation="org.ton.intellij.func.template.FuncStatementContextType"/>
        <liveTemplateContext
                contextId="funcExpression"
                implementation="org.ton.intellij.func.template.FuncExpressionContextType"/>
        <defaultLiveTemplates file="/liveTemplates/FunC.xml"/>

        <gotoSymbolContributor implementation="org.ton.intellij.func.ide.navigation.FuncGotoSymbolContributor"/>

        <codeInsight.typeInfo language="FunC"
                              implementationClass="org.ton.intellij.func.codeInsight.hint.FuncTypeProvider"/>

        <!-- Hints -->
        <codeInsight.parameterInfo language="FunC"
                                   implementationClass="org.ton.intellij.func.ide.FuncParameterInfoHandler"/>
        <codeInsight.parameterNameHints language="FunC"
                                        implementationClass="org.ton.intellij.func.ide.hints.FuncParameterHintsProvider"/>

        <codeInsight.declarativeInlayProvider bundle="messages.FuncBundle"
                                              group="VALUES_GROUP"
                                              implementationClass="org.ton.intellij.func.ide.hints.FuncConstantHintsProvider"
                                              isEnabledByDefault="true"
                                              language="FunC"
                                              nameKey="codeInsight.hint.value.numeric.constant.values"
                                              providerId="func.constant.hints">
        </codeInsight.declarativeInlayProvider>

        <codeInsight.declarativeInlayProvider bundle="messages.FuncBundle"
                                              group="OTHER_GROUP"
                                              implementationClass="org.ton.intellij.func.ide.hints.FuncMethodIdHintsProvider"
                                              isEnabledByDefault="true"
                                              language="FunC"
                                              nameKey="codeInsight.hint.other.method.id"
                                              descriptionKey="codeInsight.hint.description.values.method.id"
                                              providerId="func.other.hints.method.id"/>

        <codeInsight.declarativeInlayProvider bundle="messages.FuncBundle"
                                              group="TYPES_GROUP"
                                              implementationClass="org.ton.intellij.func.ide.hints.FuncVariableTypeHintsProvider"
                                              isEnabledByDefault="true"
                                              language="FunC"
                                              nameKey="codeInsight.hint.types.variable.types"
                                              descriptionKey="codeInsight.hint.description.types.variable.types"
                                              providerId="func.types.hints.variable.types"/>

        <annotator language="FunC" implementationClass="org.ton.intellij.func.highlighting.FuncAnnotator"/>
        <annotator language="FunC" implementationClass="org.ton.intellij.func.highlighting.FuncDocAnnotator"/>

        <codeInsight.lineMarkerProvider language="FunC"
                                        implementationClass="org.ton.intellij.func.ide.linemarker.FuncRecursiveCallLineMarkerProvider"/>

        <languageInjector implementation="org.ton.intellij.func.psi.FuncStringAsmInjector"/>

        <localInspection language="FunC" displayName="Unused function inspection" groupPath="FunC"
                         groupName="Declaration redundancy" enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.func.inspection.FuncUnusedFunctionInspection"/>
        <localInspection language="FunC" displayName="Unused variable inspection" groupPath="FunC"
                         groupName="Declaration redundancy" enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.func.inspection.FuncUnusedVariableInspection"/>
        <localInspection language="FunC" displayName="Unused parameter inspection" groupPath="FunC"
                         groupName="Declaration redundancy" enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.func.inspection.FuncUnusedFunctionParameterInspection"/>
        <localInspection language="FunC" displayName="Unused type parameter inspection" groupPath="FunC"
                         groupName="Declaration redundancy" enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.func.inspection.FuncUnusedTypeParameterInspection"/>

        <!-- style issues -->
        <localInspection language="FunC" groupPath="FunC"
                         bundle="messages.InspectionBundle"
                         key="inspection.constant.expression.name"
                         groupKey="group.style.name"
                         enabledByDefault="true" level="INFORMATION"
                         implementationClass="org.ton.intellij.func.inspection.style.FuncConstantExpressionInspection"/>
        <localInspection language="FunC" groupPath="FunC"
                         bundle="messages.FuncBundle"
                         groupKey="group.style.name" enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.func.inspection.style.FuncIfThrowInspection"
                         key="inspection.func.if.throw.display.name"/>
        <localInspection language="FunC" groupPath="FunC"
                         bundle="messages.FuncBundle"
                         key="inspection.func.style.constant.name"
                         groupKey="group.style.name"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.func.inspection.style.FuncFuncStyleConstantInspection"/>

        <!-- numeric issues -->
        <localInspection language="FunC" groupPath="FunC"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.func.inspection.numeric.FuncDivideByZeroInspection"/>
        <localInspection language="FunC" groupPath="FunC"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.func.inspection.numeric.FuncIntOverflowInspection"/>

        <!-- control flow issues -->
        <localInspection language="FunC" displayName="Calling function with method-id" groupPath="FunC"
                         groupName="Control flow issues" enabledByDefault="false" level="ERROR"
                         implementationClass="org.ton.intellij.func.inspection.FuncUnexpectedGetMethodCallInspection"/>
        <localInspection language="FunC" displayName="Calling function" groupPath="FunC"
                         groupName="Control flow issues" enabledByDefault="true" level="ERROR"
                         implementationClass="org.ton.intellij.func.inspection.FuncFunctionCallInspection"/>
        <!--        <localInspection language="FunC" displayName="`if` condition is not an integer" groupPath="FunC"-->
        <!--                         groupName="Control flow issues" enabledByDefault="true" level="ERROR"-->
        <!--                         implementationClass="org.ton.intellij.func.inspection.FuncIfConditionIsNotAnIntegerInspection"/>-->

        <!-- control flow issues -->

        <!-- general -->
        <localInspection language="FunC" displayName="Unresolved reference inspection" groupPath="FunC"
                         groupName="General" enabledByDefault="true" level="ERROR"
                         implementationClass="org.ton.intellij.func.inspection.FuncUnresolvedReferenceInspection"/>
        <localInspection language="FunC" displayName="Unresolved type identifier" groupPath="FunC"
                         groupName="General" enabledByDefault="true" level="ERROR"
                         implementationClass="org.ton.intellij.func.inspection.FuncUnresolvedTypeIdentifierInspection"/>
        <localInspection language="FunC" groupPath="FunC"
                         bundle="messages.FuncBundle"
                         key="inspection.func.operator.precedence.name"
                         groupKey="group.general.name"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.func.inspection.style.FuncOperatorPrecedenceInspection"/>
        <localInspection language="FunC" groupPath="FunC"
                         bundle="messages.FuncBundle"
                         key="inspection.func.missing.impure.name"
                         groupKey="group.general.name"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.func.inspection.style.FuncMissingImpureInspection"/>
        <localInspection language="FunC" displayName="Type mismatch" groupPath="FunC"
                         bundle="messages.FuncBundle"
                         groupKey="group.general.name" enabledByDefault="true" level="ERROR"
                         implementationClass="org.ton.intellij.func.inspection.FuncTypeMismatchInspection"/>

        <!-- Completion -->
        <completion.contributor language="FunC"
                                implementationClass="org.ton.intellij.func.ide.completion.FuncCompletionContributor"/>

        <!-- Code Style -->
        <codeStyleSettingsProvider implementation="org.ton.intellij.func.ide.formatter.FuncCodeStyleSettingsProvider"/>
        <langCodeStyleSettingsProvider
                implementation="org.ton.intellij.func.ide.formatter.FuncLanguageCodeStyleSettingsProvider"/>

        <!--        <projectConfigurable instance="org.ton.intellij.func.ide.configurable.FuncProjectConfigurable"-->
        <!--                             groupId="language"-->
        <!--                             id="language.func"-->
        <!--                             bundle="messages.FuncBundle" key="func.name"/>-->
    </extensions>

    <actions>
        <action id="NewFunc" class="org.ton.intellij.func.action.file.FuncCreateFileAction"
                text="FunC File" description="Create new FunC file">
            <add-to-group group-id="NewGroup"/>
        </action>
    </actions>
</idea-plugin>

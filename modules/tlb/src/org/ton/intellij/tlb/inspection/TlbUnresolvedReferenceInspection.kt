package org.ton.intellij.tlb.inspection

import com.intellij.codeInspection.LocalInspectionToolSession
import com.intellij.codeInspection.ProblemHighlightType
import com.intellij.codeInspection.ProblemsHolder
import org.ton.intellij.tlb.inspection.fix.TlbConfigureGlobalBlockTlbFix
import org.ton.intellij.tlb.psi.TlbParamTypeExpression
import org.ton.intellij.tlb.psi.TlbReference
import org.ton.intellij.tlb.psi.TlbVisitor

class TlbUnresolvedReferenceInspection : TlbInspectionBase() {
    override fun buildTlbVisitor(
        holder: ProblemsHolder,
        session: LocalInspectionToolSession,
    ): TlbVisitor = object : TlbVisitor() {
        override fun visitParamTypeExpression(expression: TlbParamTypeExpression) {
            val name = expression.identifier?.text ?: return
            if (name == "Any" || name == "Cell" || name.startsWith("uint") || name.startsWith("int") || name.startsWith("bits")) return
            val reference = expression.reference as? TlbReference ?: return
            if (reference.multiResolve(false).isEmpty()) {
                if (BLOCK_TLB_TYPES.contains(name)) {
                    holder.registerProblem(
                        expression, 
                        "Unresolved reference: ${expression.text}. This type is available in block.tlb", 
                        ProblemHighlightType.LIKE_UNKNOWN_SYMBOL,
                        TlbConfigureGlobalBlockTlbFix()
                    )
                } else {
                    holder.registerProblem(
                        expression, 
                        "Unresolved reference: ${expression.text}", 
                        ProblemHighlightType.LIKE_UNKNOWN_SYMBOL
                    )
                }
            }
        }
    }
}

val BLOCK_TLB_TYPES = setOf(
    "Unit",
    "True",
    "Bool",
    "BoolFalse",
    "BoolTrue",
    "Maybe",
    "Either",
    "Both",
    "Bit",
    "Hashmap",
    "HashmapNode",
    "HmLabel",
    "Unary",
    "HashmapE",
    "BitstringSet",
    "HashmapAug",
    "HashmapAugNode",
    "HashmapAugE",
    "VarHashmap",
    "VarHashmapNode",
    "VarHashmapE",
    "PfxHashmap",
    "PfxHashmapNode",
    "PfxHashmapE",
    "MsgAddressExt",
    "Anycast",
    "MsgAddressInt",
    "MsgAddress",
    "VarUInteger",
    "VarInteger",
    "Grams",
    "Coins",
    "ExtraCurrencyCollection",
    "CurrencyCollection",
    "CommonMsgInfo",
    "CommonMsgInfoRelaxed",
    "TickTock",
    "StateInit",
    "StateInitWithLibs",
    "SimpleLib",
    "Message",
    "MessageRelaxed",
    "MessageAny",
    "IntermediateAddress",
    "MsgEnvelope",
    "MsgMetadata",
    "InMsg",
    "ImportFees",
    "InMsgDescr",
    "OutMsg",
    "EnqueuedMsg",
    "OutMsgDescr",
    "OutMsgQueue",
    "ProcessedUpto",
    "ProcessedInfo",
    "IhrPendingSince",
    "IhrPendingInfo",
    "AccountDispatchQueue",
    "DispatchQueue",
    "OutMsgQueueExtra",
    "OutMsgQueueInfo",
    "StorageExtraInfo",
    "StorageUsed",
    "StorageInfo",
    "Account",
    "AccountStorage",
    "AccountState",
    "AccountStatus",
    "ShardAccount",
    "DepthBalanceInfo",
    "ShardAccounts",
    "Transaction",
    "MERKLE_UPDATE",
    "HASH_UPDATE",
    "MERKLE_PROOF",
    "AccountBlock",
    "ShardAccountBlocks",
    "TrStoragePhase",
    "AccStatusChange",
    "TrCreditPhase",
    "TrComputePhase",
    "ComputeSkipReason",
    "TrActionPhase",
    "TrBouncePhase",
    "TransactionDescr",
    "SplitMergeInfo",
    "SmartContractInfo",
    "OutList",
    "OutAction",
    "LibRef",
    "OutListNode",
    "ShardIdent",
    "ExtBlkRef",
    "BlockIdExt",
    "BlkMasterInfo",
    "ShardStateUnsplit",
    "ShardState",
    "LibDescr",
    "seq_no",
    "BlockInfo",
    "BlkPrevInfo",
    "Block",
    "BlockExtra",
    "ValueFlow",
    "BinTree",
    "FutureSplitMerge",
    "ShardDescr",
    "ShardHashes",
    "BinTreeAug",
    "ShardFeeCreated",
    "ShardFees",
    "ConfigParams",
    "KeyMaxLt",
    "KeyExtBlkRef",
    "OldMcBlocksInfo",
    "Counters",
    "CreatorStats",
    "BlockCreateStats",
    "SigPubKey",
    "CryptoSignatureSimple",
    "CryptoSignature",
    "CryptoSignaturePair",
    "Certificate",
    "CertificateEnv",
    "SignedCertificate",
    "ValidatorDescr",
    "ValidatorSet",
    "ConfigParam",
    "BurningConfig",
    "GlobalVersion",
    "ConfigProposalSetup",
    "ConfigVotingSetup",
    "ConfigProposal",
    "ConfigProposalStatus",
    "WorkchainFormat",
    "WcSplitMergeTimings",
    "WorkchainDescr",
    "ComplaintPricing",
    "BlockCreateFees",
    "StoragePrices",
    "GasLimitsPrices",
    "ParamLimits",
    "BlockLimits",
    "MsgForwardPrices",
    "CatchainConfig",
    "ConsensusConfig",
    "ValidatorTempKey",
    "ValidatorSignedTempKey",
    "MisbehaviourPunishmentConfig",
    "SizeLimitsConfig",
    "SuspendedAddressList",
    "PrecompiledSmc",
    "PrecompiledContractsConfig",
    "OracleBridgeParams",
    "JettonBridgePrices",
    "JettonBridgeParams",
    "BlockSignaturesPure",
    "BlockSignatures",
    "BlockProof",
    "ProofChain",
    "TopBlockDescr",
    "TopBlockDescrSet",
    "ProducerInfo",
    "ComplaintDescr",
    "ValidatorComplaint",
    "ValidatorComplaintStatus",
    "VmStackValue",
    "VmCellSlice",
    "VmTupleRef",
    "VmTuple",
    "VmStack",
    "VmStackList",
    "VmSaveList",
    "VmGasLimits",
    "VmLibraries",
    "VmControlData",
    "VmCont",
    "DNS_RecordSet",
    "TextChunkRef",
    "TextChunks",
    "Text",
    "DNSRecord",
    "ProtoList",
    "Protocol",
    "SmcCapList",
    "SmcCapability",
    "ChanConfig",
    "ChanState",
    "ChanPromise",
    "ChanSignedPromise",
    "ChanMsg",
    "ChanSignedMsg",
    "ChanOp",
    "ChanData",
)

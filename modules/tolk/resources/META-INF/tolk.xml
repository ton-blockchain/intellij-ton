<idea-plugin package="org.ton.intellij.tolk">
    <extensions defaultExtensionNs="com.intellij">
        <fileType name="Tolk"
                  implementationClass="org.ton.intellij.tolk.TolkFileType"
                  fieldName="INSTANCE"
                  language="Tolk"
                  extensions="tolk"
        />
        <consoleFilterProvider implementation="org.ton.intellij.tolk.ide.TolkConsoleFilterProvider"/>
        <breadcrumbsInfoProvider implementation="org.ton.intellij.tolk.ide.structure.TolkBreadcrumbsProvider"/>
        <navbar implementation="org.ton.intellij.tolk.ide.structure.TolkNavBarModelExtension" order="first"/>

        <lang.parserDefinition language="Tolk"
                               implementationClass="org.ton.intellij.tolk.parser.TolkParserDefinition"/>
        <lang.syntaxHighlighterFactory language="Tolk"
                                       implementationClass="org.ton.intellij.tolk.highlighting.TolkSyntaxHighlighterFactory"/>
        <lang.commenter language="Tolk" implementationClass="org.ton.intellij.tolk.ide.TolkCommenter"/>
        <enterHandlerDelegate implementation="org.ton.intellij.tolk.ide.typing.TolkEnterInLineCommentHandler"
                              id="TolkEnterInLineCommentHandler"/>

        <lang.braceMatcher language="Tolk" implementationClass="org.ton.intellij.tolk.ide.TolkPairedBraceMatcher"/>
        <lang.quoteHandler language="Tolk" implementationClass="org.ton.intellij.tolk.ide.TolkQuoteHandler"/>
        <lang.foldingBuilder language="Tolk" implementationClass="org.ton.intellij.tolk.ide.TolkFoldingBuilder"/>
        <lang.psiStructureViewFactory language="Tolk"
                                      implementationClass="org.ton.intellij.tolk.ide.structure.TolkPsiStructureViewFactory"/>
        <lang.findUsagesProvider language="Tolk"
                                 implementationClass="org.ton.intellij.tolk.ide.TolkFindUsagesProvider"/>
        <lang.implementationTextSelectioner language="Tolk"
                                            implementationClass="org.ton.intellij.tolk.ide.TolkImplementationTextSelectioner"/>
        <!--        <platform.backend.documentation.psiTargetProvider id="TolkDocumentationTargetProvider"-->
        <!--                                                          implementation="org.ton.intellij.tolk.doc.TolkDocumentationProvider"/>-->
        <!--        <platform.backend.documentation.inlineDocumentationProvider implementation="org.ton.intellij.tolk.doc.TolkInlineDocumentationProvider"/>-->

        <lang.formatter language="Tolk" implementationClass="org.ton.intellij.tolk.ide.formatter.TolkFormatter"/>
        <lang.refactoringSupport language="Tolk"
                                 implementationClass="org.ton.intellij.tolk.refactor.TolkRefactoringSupportProvider"/>
        <lang.namesValidator language="Tolk"
                             implementationClass="org.ton.intellij.tolk.refactor.TolkNamesValidator"/>
        <completion.contributor language="Tolk"
                                implementationClass="org.ton.intellij.tolk.ide.completion.TolkCompletionContributor"/>
        <completion.confidence language="Tolk" order="last"
                               implementationClass="org.ton.intellij.tolk.ide.completion.TolkCompletionConfidence"/>
        <lookup.charFilter implementation="org.ton.intellij.tolk.ide.completion.TolkCharFilter"/>
        <typedHandler implementation="org.ton.intellij.tolk.codeInsight.editorActions.TolkTypedHandler"/>

        <stubIndex implementation="org.ton.intellij.tolk.stub.index.TolkNamedElementIndex"/>
        <stubIndex implementation="org.ton.intellij.tolk.stub.index.TolkTypeDefIndex"/>
        <stubIndex implementation="org.ton.intellij.tolk.stub.index.TolkStructIndex"/>
        <stubIndex implementation="org.ton.intellij.tolk.stub.index.TolkTypeSymbolIndex"/>
        <stubIndex implementation="org.ton.intellij.tolk.stub.index.TolkFunctionIndex"/>
        <stubElementTypeHolder class="org.ton.intellij.tolk.psi.TolkElementTypes" externalIdPrefix="tolk."/>

        <editorNotificationProvider
                implementation="org.ton.intellij.tolk.ide.configurable.TolkSetupToolchainNotificationProvider"/>

        <lang.elementManipulator forClass="org.ton.intellij.tolk.psi.TolkIncludeDefinition"
                                 implementationClass="org.ton.intellij.tolk.psi.impl.TolkIncludePathElementManipulator"/>

        <colorSettingsPage implementation="org.ton.intellij.tolk.ide.colors.TolkColorSettingsPage"/>
        <additionalTextAttributes scheme="Default" file="colorSchemes/TolkDefault.xml"/>
        <additionalTextAttributes scheme="Dark" file="colorSchemes/TolkDark.xml"/>

        <liveTemplateContext
                contextId="tolk"
                implementation="org.ton.intellij.tolk.template.TolkEverywhereContextType"/>

        <vcs.codeVisionLanguageContext language="Tolk"
                                       implementationClass="org.ton.intellij.tolk.codeInsight.hint.codeVision.TolkVcsCodeVisionContext"/>
        <codeInsight.daemonBoundCodeVisionProvider
                implementation="org.ton.intellij.tolk.codeInsight.hint.codeVision.TolkReferencesCodeVisionProvider"/>
        <codeInsight.typeInfo language="Tolk"
                              implementationClass="org.ton.intellij.tolk.codeInsight.hint.TolkTypeProvider"/>
        <codeInsight.declarativeInlayProvider
                language="Tolk"
                implementationClass="org.ton.intellij.tolk.codeInsight.hint.TolkTypeHintsProvider"
                group="TYPES_GROUP"
                isEnabledByDefault="true"
                bundle="messages.TolkBundle"
                nameKey="codeInsight.hint.types"
                providerId="tolk.types.hints"
        >
            <option optionId="hint.type.var"
                    enabledByDefault="true"
                    bundle="messages.TolkBundle"
                    nameKey="codeInsight.hint.name.types.var"
                    descriptionKey="codeInsight.hint.description.types.var"/>
            <option optionId="hint.type.const"
                    enabledByDefault="false"
                    bundle="messages.TolkBundle"
                    nameKey="codeInsight.hint.name.types.const"
                    descriptionKey="codeInsight.hint.description.types.const"/>
            <option optionId="hint.type.fun"
                    enabledByDefault="true"
                    bundle="messages.TolkBundle"
                    nameKey="codeInsight.hint.name.types.fun"
                    descriptionKey="codeInsight.hint.description.types.fun"/>

        </codeInsight.declarativeInlayProvider>

        <codeInsight.declarativeInlayProvider language="Tolk"
                                              bundle="messages.TolkBundle"
                                              nameKey="codeInsight.hint.other.method.id"
                                              group="OTHER_GROUP"
                                              implementationClass="org.ton.intellij.tolk.codeInsight.hint.TolkMethodIdHintsProvider"
                                              isEnabledByDefault="true"
                                              descriptionKey="codeInsight.hint.description.values.method.id"
                                              providerId="tolk.other.hints.method.ids"/>

        <codeInsight.declarativeInlayProvider group="PARAMETERS_GROUP"
                                              implementationClass="org.ton.intellij.tolk.codeInsight.hint.TolkParameterHintsProvider"
                                              isEnabledByDefault="true"
                                              language="Tolk"
                                              providerId="tolk.parameters.hints"
                                              bundle="messages.TolkBundle"
                                              nameKey="codeInsight.hint.parameters"
                                              descriptionKey="codeInsight.hint.description.parameters"/>
        <codeInsight.parameterInfo language="Tolk"
                                   implementationClass="org.ton.intellij.tolk.codeInsight.hint.TolkParameterInfoHandler"/>

        <!--        <codeInsight.declarativeInlayProvider bundle="messages.TolkBundle"-->
        <!--                                              group="VALUES_GROUP"-->
        <!--                                              implementationClass="org.ton.intellij.tolk.ide.hints.TolkConstantHintsProvider"-->
        <!--                                              isEnabledByDefault="true"-->
        <!--                                              language="Tolk"-->
        <!--                                              nameKey="numeric.constant.values"-->
        <!--                                              providerId="tolk.constant.hints">-->
        <!--        </codeInsight.declarativeInlayProvider>-->


        <annotator language="Tolk" implementationClass="org.ton.intellij.tolk.highlighting.TolkDumbAnnotator"/>
        <annotator language="Tolk" implementationClass="org.ton.intellij.tolk.highlighting.TolkAnnotator"/>
        <annotator language="Tolk" implementationClass="org.ton.intellij.tolk.highlighting.TolkDocAnnotator"/>

        <codeInsight.lineMarkerProvider language="Tolk"
                                        implementationClass="org.ton.intellij.tolk.ide.linemarker.TolkRecursiveCallLineMarkerProvider"/>

        <lang.elementManipulator forClass="org.ton.intellij.tolk.psi.TolkStringLiteral"
                                 implementationClass="org.ton.intellij.tolk.psi.reference.manipulators.TolkStringLiteralManipulator"/>
        <multiHostInjector implementation="org.ton.intellij.tolk.ide.TolkLanguageInjector"/>

        <localInspection language="Tolk" groupKey="tolk"
                         enabledByDefault="true" level="ERROR"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkFunKeywordExpectedInspection"
                         bundle="messages.TolkBundle"
                         key="inspection.name.fun_keyword_expected"/>
        <localInspection language="Tolk" displayName="Unused function inspection" groupPath="Tolk"
                         groupName="Declaration redundancy" enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkUnusedFunctionInspection"/>
        <localInspection language="Tolk" displayName="Unused variable inspection" groupPath="Tolk"
                         groupName="Declaration redundancy" enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkUnusedVariableInspection"/>
        <localInspection language="Tolk" displayName="Unused parameter inspection" groupPath="Tolk"
                         groupName="Declaration redundancy" enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkUnusedFunctionParameterInspection"/>
        <localInspection language="Tolk" displayName="Unused type parameter inspection" groupPath="Tolk"
                         groupName="Declaration redundancy" enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkUnusedTypeParameterInspection"/>
        <!--        <localInspection language="Tolk" displayName="Unsupported element inspection" groupPath="Tolk"-->
        <!--                         groupName="Declaration redundancy" enabledByDefault="true" level="ERROR"-->
        <!--                         implementationClass="org.ton.intellij.tolk.inspection.TolkUnsupportedElementInspection"/>-->
        <localInspection language="Tolk" displayName="__expect_type inspection" groupPath="Tolk"
                         groupName="Declaration redundancy" enabledByDefault="true" level="ERROR"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkExpectTypeBuiltinInspection"/>

        <!-- style issues -->
        <localInspection language="Tolk" groupPath="Tolk"
                         bundle="messages.InspectionBundle"
                         key="inspection.constant.expression.name"
                         groupKey="group.style.name"
                         enabledByDefault="true" level="INFORMATION"
                         implementationClass="org.ton.intellij.tolk.inspection.style.TolkConstantExpressionInspection"/>

        <!-- numeric issues -->
        <localInspection language="Tolk" groupPath="Tolk"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.tolk.inspection.numeric.TolkDivideByZeroInspection"/>
        <localInspection language="Tolk" groupPath="Tolk"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.tolk.inspection.numeric.TolkIntOverflowInspection"/>

        <!-- control flow issues -->
        <localInspection language="Tolk" displayName="Missing return at end of function" groupPath="Tolk"
                         groupName="Control flow issues" enabledByDefault="true" level="ERROR"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkMissingReturnInspection"/>
        <localInspection language="Tolk" displayName="Calling function" groupPath="Tolk"
                         groupName="Control flow issues" enabledByDefault="true" level="ERROR"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkFunctionCallInspection"/>
        <localInspection language="Tolk" groupPath="Tolk" groupName="Control flow issues" enabledByDefault="true"
                         level="INFORMATION"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkReplaceGuardClauseWithFunctionCallInspection"
                         displayName="Replace guard clause with function call"/>
        <!--        <localInspection language="Tolk" displayName="`if` condition is not an integer" groupPath="Tolk"-->
        <!--                         groupName="Control flow issues" enabledByDefault="true" level="ERROR"-->
        <!--                         implementationClass="org.ton.intellij.tolk.inspection.TolkIfConditionIsNotAnIntegerInspection"/>-->

        <!-- control flow issues -->

        <!-- general -->
        <!--        <localInspection language="Tolk" displayName="Unresolved reference inspection" groupPath="Tolk"-->
        <!--                         groupName="General" enabledByDefault="true" level="ERROR"-->
        <!--                         implementationClass="org.ton.intellij.tolk.inspection.TolkUnresolvedReferenceInspection"/>-->
        <!--        <localInspection language="Tolk" displayName="Unresolved type identifier" groupPath="Tolk"-->
        <!--                         groupName="General" enabledByDefault="true" level="ERROR"-->
        <!--                         implementationClass="org.ton.intellij.tolk.inspection.TolkUnresolvedTypeIdentifierInspection"/>-->
        <localInspection language="Tolk" groupPath="Tolk" displayName="Deprecation function" groupName="General"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.ton.intellij.tolk.inspection.TolkDeprecationInspection"/>
        <!-- Completion -->
        <completion.contributor language="Tolk"
                                implementationClass="org.ton.intellij.tolk.ide.completion.TolkCompletionContributor"/>

        <!-- region Postfix Templates -->
        <codeInsight.template.postfixTemplateProvider
                language="Tolk"
                implementationClass="org.ton.intellij.tolk.ide.completion.postfix.TolkPostfixTemplateProvider"/>
        <!-- endregion Postfix Templates -->

        <!-- Code Style -->
        <langCodeStyleSettingsProvider
                implementation="org.ton.intellij.tolk.ide.formatter.TolkLanguageCodeStyleSettingsProvider"/>

        <projectConfigurable instance="org.ton.intellij.tolk.ide.configurable.TolkProjectConfigurable"
                             groupId="language"
                             id="language.tolk"
                             bundle="messages.TolkBundle" key="tolk.name"/>

        <additionalLibraryRootsProvider
                implementation="org.ton.intellij.tolk.toolchain.TolkSdkSyntheticLibraryProvider"/>

        <postStartupActivity implementation="org.ton.intellij.tolk.psi.impl.TolkBuiltins$RegisterActivity"/>
        <postStartupActivity implementation="org.ton.intellij.tolk.toolchain.TolkToolchainDetectActivity"/>
    </extensions>

    <extensions defaultExtensionNs="org.ton">
        <tolk.toolchainFlavor id="tolk.nodeModulesFlavor"
                              implementation="org.ton.intellij.tolk.toolchain.flavor.TolkNodeModulesToolchainFlavor"
                              order="first"/>
        <tolk.toolchainFlavor id="tolk.compilerRepositoryFlavor"
                              implementation="org.ton.intellij.tolk.toolchain.flavor.TolkCompilerRepositoryToolchainFlavor"/>
    </extensions>

    <extensionPoints>
        <extensionPoint qualifiedName="org.ton.tolk.toolchainFlavor"
                        interface="org.ton.intellij.tolk.toolchain.flavor.TolkToolchainFlavor"
                        dynamic="true"/>
    </extensionPoints>

    <applicationListeners>
        <listener class="org.ton.intellij.tolk.psi.impl.TolkBuiltins$UnregisterListener"
                  topic="com.intellij.openapi.project.ProjectManagerListener"/>
    </applicationListeners>

    <actions>
        <action id="NewTolk" class="org.ton.intellij.tolk.action.file.TolkCreateFileAction"
                text="Tolk File" description="Create new Tolk file">
            <add-to-group group-id="NewGroup"/>
        </action>
    </actions>
</idea-plugin>
